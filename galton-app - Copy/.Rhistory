confusionMatrix(testing$diagnosis,predict(modelFit1,testPC1))
install.packages("doParallel")
library(doParallel)
registerDoParallel(cores=4)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP
irisP <- as.data.frame(irisP);
rownames(irisP)
str(irisP)
irisP$Species
colnames(irisP)
irisP$Species <- rownames(irisP)
colnames(irisP)
irisP
pred <- predict(modFit,testing);
pred==testing$Species
testing$predRight <- pred==testing$Species
testing
table(pred,testing$Species)
?table
library(ISLR); data(Wage)
install_packages(ISLR)
install.packages(ISLR)
install.package(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR); data(Wage)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
library("ElemStatLearn")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
str(segmentationOriginal)
?rowcount
?rcount
?rnum
?rownum
length(segmentationOriginal)
nrow(segmentationOriginal)
nrow(segmentationOriginal[, "Case"=="Test"])
nrow(segmentationOriginal[, "Case"==1])
nrow(segmentationOriginal[, "Case"==0])
nrow(segmentationOriginal[segmentationOriginal$Case=="Tes"])
nrow(segmentationOriginal[segmentationOriginal$Case=="Test"])
nrow(segmentationOriginal[segmentationOriginal$Case==c("Test")])
?subset
subset(segmentationOriginal, Case=="Test")
nrow(subset(segmentationOriginal, Case=="Test"))
nrow(subset(segmentationOriginal, Case=="Train"))
nrow(segmentationOriginal[segmentationOriginal$Case=='Test'])
nrow(segmentationOriginal[,segmentationOriginal$Case=='Test'])
nrow(segmentationOriginal[,"Case"=='Test'])
nrow(segmentationOriginal["Case"=='Test',])
nrow(segmentationOriginal[segmentationOriginal$Case=="Test",])
tranning <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
head(segmentationOriginal$CART)
?segmentationOriginal
modFit <- train(Class ~ ., method="rpart",data=training)
training <- subset(segmentationOriginal, Case=="Train")
modFit <- train(Class ~ ., method="rpart",data=training)
print(modFit)
print(modFit$finalModel)
newdata <- c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(ModFit, newdata)
predict(modFit, newdata)
predict(modFit, testing)
print(modFit$finalModel)
install.packages("pgmm")
data(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
?olive
library(doParallel)
registerDoParallel(cores=4)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modFit <- train(Area ~ ., mothod="rpart", data=olive)
library(caret)
modFit <- train(Area ~ ., mothod="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(olive)
print(modFit$finalModel)
predict(modFit, newdata=newdata)
modFit$finalModel
modFit <- train(Area ~ ., method="rpart", data=olive)
print(modFit$finalModel)
predict(modFit, newdata=newdata)
modFit <- train(Area ~ ., method="rpart", data=olive, method = "class")
modFit <- train(Area ~ ., method="rpart", data=olive, type = "class")
print(modFit$finalModel)
modFit <- train(Area ~ ., method="rpart", data=olive)
?rpart
?train
olive1 <- olive
str(olive1)
olive1$Area <- as.factor(olive1$Area)
str(olive1)
modFit1 <- train(Area ~ ., method="rpart", data=olive1)
print(modFit$finalModel)
print(modFit1$finalModel)
predict(modFit1, newdata=newdata)
modFit <- train(Area ~ ., method="rpart", data=olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
dim(SAheart)
?sample
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAHeart)
str(SAheart)
summary(modFit)
summary(modFit$finalModel)
library(doParallel)
registerDoParallel(cores=4)
library(ElemStatLearn)
data(SAheart)
str(SAheart)
SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fitMod <- train(chd ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="gml", family="binomial", data = SAheart)
library(caret)
fitMod <- train(chd ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="gml", family="binomial", data = SAheart)
fitMod <- train(chd ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", data = SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, fitMod$fitted)
fitMod$fitted
fitMod$finalModel$fitted
missClass(trainSA$chd, fitMod$finalModel$fitted)
preditc(modelFit, testSA)
predict(modelFit, testSA)
predict(modFit, testSA)
predict(fitMod, testSA)
summary(fitMod$finalModel)
predict(fitMod, trainSA)
missClass(trainSA$chd, predict(fitMod,trainSA))
missClass(testSA$chd, predict(fitMod,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fitMod <- train(chd ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", data = SAheart)
fitMod <- train(chd ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", type="class", data = SAheart)
fitMod <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", type="class", data = SAheart)
fitMod <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", data = SAheart)
fitMod$finalModel$fitted
fitMod <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", type="class", data = trainSA)
fitMod <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + + ldl, method ="glm", family="binomial", data = trainSA)
fitMod$finalModel$fitted
class(fitMod$finalModel$fitted)
as.factor(fitMod$finalModel$fitted)
predict(modFit, testSA)
predict(fitMod, testSA)
predict(fitMod, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
as.numeric(predict(fitMod, trainSA))
missClass(trainSA$chd, as.numeric(predict(fitMod, trainSA)))
missClass(testSA$chd, as.numeric(predict(fitMod, testSA)))
missClass(as.numeric(predict(fitMod, testSA)),testSA$chd)
?train
missClass(as.numeric(predict(fitMod, testSA, type="response")),testSA$chd)
predict(fitMod, testSA, type="response")
?predict.gml
?predict.glm
> library(pgmm)
> data(olive)
> olive = olive[,-1]
> library(pgmm)
> data(olive)
> olive = olive[,-1]
> library(pgmm)
> data(olive)
> olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
olive$Area <- factor(olive$Area)
newdata = as.data.frame(t(colMeans(olive)))
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(as.factor(Area) ~ ., method="rpart", data=olive)
predict(modFit, newdata=newdata)
library(doParallel)
registerDoParallel(cores=2)
library(caret)
?predict
library(caret)
?caret.predict
predict
?predict
?predict.test
predict.train
?predict.train
library(doParallel)
registerDoParallel(cores=4)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
?train
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,modFit$finalModel$chd)
modFit$finalModel$chd
print(modFit)
missClass(trainSA$chd,predict(modFit,trainSA)
)
missClass(trainSA$chd,predict(modFit,testSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
unique(vowel.train$y)
set.seed(33833)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
?varImp
modFit <- train(y ~., method="rf", data=vowel.train)
varImp(modFit$finalModel, scale=FALSE)
?order
order(varImp(modFit$finalModel, scale=FALSE), Overall)
f <- varImp(modFit$finalModel, scale=FALSE)
f
f[order(-Overall),]
f[,order(-Overall)]
f[,order(-f$Overall)]
str(f)
order(f)
order(-f)
order(-varImp(modFit$finalModel, scale=FALSE))
cor(vowel.test)
cor(vowel.test[,-y])
cor(vowel.test[,-c("y")])
cor(vowel.test[,-c('y')])
f1 <- vowel.test[,-vowel.test$y]
f1 <- vowel.test[,-1]
cor(f1)
cor(f1) > 0.5
i1 <- cor(f1) >0.5
c1 <- cor(f1)
c1[i1]
c1*i1
View(vowel.test)
View(vowel.train)
order(-f)
str(vowel.train)
str(vowel.test)
set.seed(33833)
modFit1 <- train(y ~ ., method="rf", data=vowel.train)
modFit2 <- train(y ~ ., method="gbm", data=vowel.train)
accuracy(modFit1,vowel.test)
?accuracy
pred1 <- predict(modFit1, vowel.test$y)
pred1 <- predict(modFit1, vowel.test)
confusionMatrix(pred1, vowel.test$y)
pred2 <- predict(modFit2, vowel.test)
confusionMatrix(pred2, vowel.test$y)
pred1 <- predict(modFit1$finalModel, vowel.test)
confusionMatrix(pred1, vowel.test$y)
library(doParallels)
library(doParallel)
registerParalllel(core=4)
?doParallel
registerDoParalllel(core=4)
registerDoParallel(core=4)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
View(vowel.test)
modFit1 <- train(y~., data=train)
modFit1 <- train(y~., data=vowel.train)
summary(modFit1)
confusionMatrix(modFit1)
pred1 <- predict(modFit1, vowel.test$y)
pred1 <- predict(modFit1, vowel.test)
summary(pred1)
modFit1
modFit1$finalModel
pred1
?caret
confusionMatrix(pred1, vowel.test$y)
?binom.test
modFit2 <- train(y~., model="gbm" data=vowel.train)
modFit2 <- train(y~., model="gbm", data=vowel.train)
pred2(modFit2, vowel.test)
pred2 <- predict(modFit2, vowel.test)
voweldf <- data.frame(pred1,pred2,y=vowel.test$y)
modFit <- train(y ~ ., method="gam", data=voweldf)
modFit
set.seed(33833)
modFit1 <- train(y~., data=vowel.train)
modFit2 <- train(y~., model="gbm", data=vowel.train)
pred1 <- predict(modFit1, vowel.test)
pred2 <- predict(modFit2, vowel.test)
xtab1 <- table(pred1, vowel.test)
xtab1 <- table(pred1, vowel.test$y)
confusionMatrix(xtab1)
xtab2 <- table(pred2, vowel.test$y)
confusionMatrix(xtab2)
xtab <- table(pred1, pred2)
confusionMatrix(xtab)
xtab <- table(pred2, pred1)
confusionMatrix(xtab)
xtab <- table(pred, vowel.test$y)
set.seed(33833)
voweldf <- data.frame(pred1,pred2,y=vowel.test$y)
modFit <- train(y ~ ., method="gam", data=voweldf)
pred <- predict(modFit, vowel.test)
xtab <- table(pred, vowel.test$y)
confusionMatrix(xtab)
''
modFit
?confusionMatrix
xtab
pred
pred1
xtab1
library(DoParallel)
library(doParallel)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
modFit <- train(y ~ ., method = "rf", data = vowel.test)
modFit
modFit <- train(y ~ ., method = "rf", data = vowel.train)
modFit1 <- modFit
pred1 <- train(modFit1, vowel.test)
pred1 <- predict(modFit1, vowel.test)
xtab1 <- table(pred1, vowel.test$y)
confusionMatrix(xtab1)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(vowel.test$y, pred1)
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
sum(pred1 == vowel.test$y) / length(pred1)
xtab1
pred1 <- train(modFit1, vowel.test, type="response")
pred1 <- predict(modFit1, vowel.test, type="response")
modFit <- train(y ~ ., method = "rf", trControl=trainControl(method="cv"), data = vowel.train)
modFit1 <- modFit
pred1 <- predict(modFit1, vowel.test)
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
modFit <- train(y ~ ., method = "rf", trControl=trainControl(method="cv"), prox=TRUE, data = vowel.train)
modFit1 <- modFit
pred1 <- predict(modFit1, vowel.test)
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
?train
modFit2 <- train(y ~ ., method = "gbm", trControl=trainControl(method="cv"), data = vowel.train)
modFit2 <- train(y ~ ., method = "gbm", data = vowel.train)
modFit2 <- train(y ~ ., method = "gbm", data = vowel.train)
pred2 <- predict(modFit2, vowel.test)
confusionMatrix(vowel.test$y, pred2)$overall["Accuracy"]
sum(pred1 == vowel.test$y) / length(pred2)
sum(pred2 == vowel.test$y) / length(pred2)
confusionMatrix(vowel.test$y, pred2)
idx <- (pred1==pred2)
confusionMatrix(pred1[idx],vowel.test$y)
length(pred1[idx])
length(vowel.test$y)
confusionMatrix(pred2[idx],vowel.test$y)
length(idx)
confusionMatrix(pred1, pred2 ,vowel.test$y)
pred1
pred2
pred <- pred1[idx]
length(pred)
ind <- (pred1 == pred2 == vowel.test$y)
tst <- vowel.test$y[idx]
sum(pred == tst)/length(vowel.test)
sum(pred == tst)/length(vowel.test$y)
confusionMatrix(pred1[idx],vowel.test$y[idx])
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
confusionMatrix(vowel.test$y, pred2)
confusionMatrix(vowel.test$y, pred2)$overall["Accuracy"]
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
modFit1 <- train(y ~ ., method = "rf", trControl=trainControl(method="cv"), data = vowel.train)
pred1 <- predict(modFit1, vowel.test)
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
pred1 <- predict(modFit1, vowel.test)
pred1
modFit1 <- train(y ~ ., method = "rf", data = vowel.train)
pred1 <- predict(modFit1, vowel.test)
pred1
library(doParallel)
registerDoParallel(core=4)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
modFit1 <- train(y ~ ., method = "rf", trControl=trainControl(method="cv"), data = vowel.train)
pred1 <- predict(modFit1, vowel.test)
confusionMatrix(vowel.test$y, pred1)$overall["Accuracy"]
modFit2 <- train(y ~ ., method = "gbm", data = vowel.train)
install.packages("shiny")
library(shiny)
install.packages("xtable")
library(shiny)
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
require(rCharts)
install.packages("devtools")
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages("RCurl")
install.packages("RCurl")
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rcpp")
library(devtools)
install.packages(c("BH", "CORElearn", "dplyr", "evaluate", "gridExtra", "httr", "knitr", "lme4", "manipulate", "MASS", "mime", "quantreg", "R6", "RcppArmadillo", "rmarkdown", "scales", "SparseM", "stringr", "testthat", "UsingR"))
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
chooseCRANmirror()
update.packages(ask='graphics',checkBuilt=TRUE)
q()
library(caret)
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages("manipulate")
install.packages("caret")
install.packages("ggplot2")
install.packages("shiny")
install.packages("UsingR")
install.packages("rpart")
install.packages("resharpe2")
install.packages("reshape2")
install.packages("rmarkdown")
install.packages("randomForest")
install.packages("plyr")
install.packages("markdown")
install.packages("lubridate")
install.packages("knitr")
install.packages("doParallel")
data("airquality")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(devtools)
install_git('slidify','ramnathv')
install_github('slidify','ramnathv')
setwd("C:/Hien/MOOC/Developing Data Products/Assignment")
library(shinyapps)
?deployApp
setwd("C:/Hien/MOOC/Developing Data Products/Assignment/galton-app")
deployApp()
